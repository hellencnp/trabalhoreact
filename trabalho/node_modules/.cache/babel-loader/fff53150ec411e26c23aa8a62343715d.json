{"ast":null,"code":"var _jsxFileName = \"/workspace/trabalhoreact/trabalho/src/routed/clienteform.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputMask from 'react-input-mask';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport React from 'react';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  form: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    maxWidth: '80%',\n    margin: '0 auto',\n    '& .MuiFormControl-root': {\n      minWidth: '200px',\n      maxWidth: '500px',\n      margin: '0 24px 24px 0'\n    }\n  },\n  toolbar: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-around',\n    marginTop: '36px'\n  }\n}));\nexport default function ClienteForm() {\n  _s();\n\n  const classes = useStyles(); // Classes de caracters para a máscara da Clientelist\n  // 1) Três primeiras posições, somente letras (maiúsculas ou minúsculas) ~> [A-Za-z]\n  // 2) Quinta, sétima e oitava posições, somente dígitos ~> [0-9]\n  // 3) Sexta posição: dígitos ou letras (maiúsculas ou minúsculas) de A a J ~> [0-9A-Ja-j]\n\n  const formatChars = {\n    'A': '[A-Za-z]',\n    '0': '[0-9]',\n    '#': '[0-9A-Ja-j]'\n  }; // Máscara de entrada para a placa\n\n  const cpfmask = '000.000.000-00'; // Máscara para CPF: '000.000.000-00'\n  // Máscara para CNPJ: '00.000.000/0000-00'\n\n  const celularmask = '(00)00000-0000';\n  const [cliente, setcliente] = useState({\n    id: null,\n    nome: '',\n    cpf: '',\n    rg: '',\n    logradouro: '',\n    num_imovel: '',\n    complemento: '',\n    bairro: '',\n    municipio: '',\n    uf: '',\n    telefone: '',\n    email: ''\n  });\n  const [currentId, setCurrentId] = useState();\n  const [sendBtnStatus, setSendBtnStatus] = useState({\n    disabled: false,\n    label: 'Enviar'\n  });\n  const [sbStatus, setSbStatus] = useState({\n    open: false,\n    severity: 'success',\n    message: ''\n  });\n  const [error, setError] = useState({\n    nome: '',\n    cpf: '',\n    rg: '',\n    logradouro: '',\n    num_imovel: '',\n    complemento: '',\n    bairro: '',\n    municipio: '',\n    uf: '',\n    telefone: '',\n    email: ''\n  });\n  const [isModified, setIsModified] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false); // O diálogo de confirmação está aberto?\n\n  const [title, setTitle] = useState('Cadastrar novo cliente');\n  const history = useHistory();\n  const params = useParams(); // useEffect() para quando o formulário for carregado (só na inicialização)\n\n  useEffect(() => {\n    // Verificamos se a rota atual contém o parâmetro id\n    // Em caso positivo, buscamos os dados no back-end e carregamos o formulário para edição\n    if (params.id) {\n      setTitle('Editar cliente');\n      getData(params.id);\n    }\n  }, []);\n\n  async function getData(id) {\n    try {\n      let response = await axios.get(`https://api.faustocintra.com.br/clientes/${id}`);\n      setcliente(response.data);\n    } catch (error) {\n      setSbStatus({\n        open: true,\n        severity: 'error',\n        message: 'Não foi possível carregar os dados para edição.'\n      });\n    }\n  }\n\n  function handleInputChange(event, property) {\n    const clientetemp = { ...cliente\n    };\n    setCurrentId(event.target.id);\n    if (event.target.id) property = event.target.id;\n\n    if (property === 'importado') {\n      const newState = !importadoChecked; // Inverte o valor\n\n      if (newState) clientetemp.importado = '1';else clientetemp.importado = '0';\n      setImportadoChecked(newState);\n    } else if (property === 'placa') {\n      clientetemp.placa = event.target.value.toUpperCase();\n    } else {\n      // Quando o nome de uma propriedade de objeto aparece entre [],\n      // significa que o nome da propriedade será determinado pela\n      // variável ou expressão contida dentro dos colchetes\n      karangoTemp[property] = event.target.value;\n    }\n\n    setKarango(karangoTemp);\n    setIsModified(true); // O formulário foi modificado\n\n    validate(karangoTemp); // Dispara a validação\n  }\n\n  function validate(data) {\n    let isValid = true;\n    const errorTemp = {\n      nome: '',\n      cpf: '',\n      rg: '',\n      logradouro: '',\n      num_imovel: '',\n      complemento: '',\n      bairro: '',\n      municipio: '',\n      uf: '',\n      telefone: '',\n      email: ''\n    }; // trim(): retira espaços em branco do início e do final de uma string\n\n    if (data.nome.trim() === '') {\n      errorTemp.nome = 'O nome deve ser preenchida';\n      isValid = false;\n    }\n\n    if (data.cpf.trim() === '') {\n      errorTemp.cpf = 'O cpf deve ser preenchido';\n      isValid = false;\n    }\n\n    if (data.rg.trim() === '') {\n      errorTemp.rg = 'O rg deve ser informado';\n      isValid = false;\n    }\n\n    if (data.logradouro.trim() === '') {\n      errorTemp.logradouro = 'O logradouro deve ser informado';\n      isValid = false;\n    }\n\n    if (data.num_imovel.trim() === '') {\n      errorTemp.num_imovel = 'O numero do imovel deve ser informado';\n      isValid = false;\n    }\n\n    if (data.complemento.trim() === '') {\n      errorTemp.complemento = 'O complemento deve ser informado';\n      isValid = false;\n    }\n\n    if (data.bairro.trim() === '') {\n      errorTemp.bairro = 'O bairro deve ser informado';\n      isValid = false;\n    }\n\n    if (data.municipio.trim() === '') {\n      errorTemp.municipio = 'O municipio deve ser informado';\n      isValid = false;\n    }\n\n    if (data.uf.trim() === '') {\n      errorTemp.uf = 'O uf deve ser informado';\n      isValid = false;\n    }\n\n    if (data.telefone.trim() === '') {\n      errorTemp.telefone = 'O telefone deve ser informado';\n      isValid = false;\n    }\n\n    if (data.email.trim() === '') {\n      errorTemp.email = 'O email deve ser informado';\n      isValid = false;\n    }\n\n    setError(errorTemp);\n    return isValid;\n  }\n\n  async function saveData() {\n    try {\n      // Desabilita o botão de enviar para evitar envios duplicados\n      setSendBtnStatus({\n        disabled: true,\n        label: 'Enviando...'\n      }); // Se estivermos editando, precisamos enviar os dados com o verbo HTTP PUT\n\n      if (params.id) await axios.put(`https://api.faustocintra.com.br/clientes/${params.id}`, cliente); // Senão, estaremos criando um novo registro, e o verbo HTTP a ser usado é o POST\n      else await axios.post('https://api.faustocintra.com.br/clientes', cliente); // Mostra a SnackBar\n\n      setSbStatus({\n        open: true,\n        severity: 'success',\n        message: 'Dados salvos com sucesso!'\n      });\n    } catch (error) {\n      // Mostra a SnackBar\n      setSbStatus({\n        open: true,\n        severity: 'error',\n        message: 'ERRO: ' + error.message\n      });\n    } // Restaura o estado inicial do botão de envio\n\n\n    setSendBtnStatus({\n      disabled: false,\n      label: 'Enviar'\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault(); // Evita que a página seja recarregada\n    // Só envia para o banco de dados se o formulário for válido\n\n    if (validate(cliente)) saveData();\n  }\n\n  function handleSbClose() {\n    setSbStatus({ ...sbStatus,\n      open: false\n    }); // Retorna para a página de listagem em caso de sucesso\n\n    if (sbStatus.severity === 'success') history.push('/list');\n  }\n\n  function handleDialogClose(result) {\n    setDialogOpen(false); // Se o usuário concordou em voltar \n\n    if (result) history.push('/list');\n  }\n\n  function handleGoBack() {\n    // Se o formulário tiver sido modificado, exibimos o diálogo de confirmação\n    if (isModified) setDialogOpen(true); // Senão, podemos voltar diretamente para a listagem\n    else history.push('/list');\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ConfirmDialog, {\n      isOpen: dialogOpen,\n      onClose: handleDialogClose,\n      children: \"H\\xE1 dados n\\xE3o salvos. Deseja realmente voltar?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: sbStatus.open,\n      autoHideDuration: 6000,\n      onClose: handleSbClose,\n      children: /*#__PURE__*/_jsxDEV(MuiAlert, {\n        elevation: 6,\n        variant: \"filled\",\n        onClose: handleSbClose,\n        severity: sbStatus.severity,\n        children: sbStatus.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"nome\",\n        label: \"Nome\",\n        variant: \"filled\",\n        value: cliente.nome,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o nome do cliente\",\n        fullWidth: true,\n        error: error.nome !== '',\n        helperText: error.nome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"cpf\",\n        label: \"CPF\",\n        variant: \"filled\",\n        value: cliente.cpf,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o cpf do cliente\",\n        fullWidth: true,\n        error: error.cpf !== '',\n        helperText: error.cpf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputMask, {\n        id: \"cpf\",\n        mask: cpfmask,\n        formatChars: formatChars,\n        value: cliente.cpf,\n        onChange: event => handleInputChange(event, 'cpf')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"rg\",\n        label: \"RG\",\n        variant: \"filled\",\n        value: cliente.rg,\n        onChange: event => handleInputChange(event, 'rg'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o rg do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.rg !== '',\n        helperText: error.rg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"logradouro\",\n        label: \"Logradouro\",\n        variant: \"filled\",\n        value: cliente.logradouro,\n        onChange: event => handleInputChange(event, 'logradouro'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o logradouro do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.logradouro !== '',\n        helperText: error.logradouro\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"num_imovel\",\n        label: \"Numero imovel\",\n        variant: \"filled\",\n        value: cliente.num_imovel,\n        onChange: event => handleInputChange(event, 'num_imovel'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o numero do imovel do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.num_imovel !== '',\n        helperText: error.num_imovel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"complemento\",\n        label: \"Complemento\",\n        variant: \"filled\",\n        value: cliente.complemento,\n        onChange: event => handleInputChange(event, 'complemento'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o complemento do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.complemento !== '',\n        helperText: error.complemento\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"bairro\",\n        label: \"Bairro\",\n        variant: \"filled\",\n        value: cliente.bairro,\n        onChange: event => handleInputChange(event, 'bairro'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o bairro do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.bairro !== '',\n        helperText: error.bairro\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"municipio\",\n        label: \"Municipio\",\n        variant: \"filled\",\n        value: cliente.municipio,\n        onChange: event => handleInputChange(event, 'municipio'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o municipio do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.municipio !== '',\n        helperText: error.municipio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"uf\",\n        label: \"UF\",\n        variant: \"filled\",\n        value: cliente.uf,\n        onChange: event => handleInputChange(event, 'uf'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o uf do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.uf !== '',\n        helperText: error.uf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"telefone\",\n        label: \"Telefone\",\n        variant: \"filled\",\n        value: cliente.telefone,\n        onChange: event => handleInputChange(event, 'telefone'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o telefone do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.telefone !== '',\n        helperText: error.telefone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"email\",\n        label: \"Email\",\n        variant: \"filled\",\n        value: cliente.email,\n        onChange: event => handleInputChange(event, 'email'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o email do cliente\",\n        select: true,\n        fullWidth: true,\n        error: error.email !== '',\n        helperText: error.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n        className: classes.toolbar,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"secondary\",\n          disabled: sendBtnStatus.disabled,\n          children: sendBtnStatus.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleGoBack,\n          children: \"Voltar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClienteForm, \"hIQgQl1qiTQ+aJuz531DDSkqrBw=\", false, function () {\n  return [useStyles, useHistory, useParams];\n});\n\n_c = ClienteForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClienteForm\");","map":{"version":3,"sources":["/workspace/trabalhoreact/trabalho/src/routed/clienteform.js"],"names":["useState","useEffect","TextField","MenuItem","FormControl","FormControlLabel","Checkbox","InputMask","makeStyles","InputAdornment","Toolbar","Button","axios","useHistory","useParams","Snackbar","MuiAlert","React","ConfirmDialog","useStyles","theme","form","display","justifyContent","flexWrap","maxWidth","margin","minWidth","toolbar","width","marginTop","ClienteForm","classes","formatChars","cpfmask","celularmask","cliente","setcliente","id","nome","cpf","rg","logradouro","num_imovel","complemento","bairro","municipio","uf","telefone","email","currentId","setCurrentId","sendBtnStatus","setSendBtnStatus","disabled","label","sbStatus","setSbStatus","open","severity","message","error","setError","isModified","setIsModified","dialogOpen","setDialogOpen","title","setTitle","history","params","getData","response","get","data","handleInputChange","event","property","clientetemp","target","newState","importadoChecked","importado","setImportadoChecked","placa","value","toUpperCase","karangoTemp","setKarango","validate","isValid","errorTemp","trim","saveData","put","post","handleSubmit","preventDefault","handleSbClose","push","handleDialogClose","result","handleGoBack"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport InputMask from 'react-input-mask'\nimport { makeStyles } from '@material-ui/core/styles'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Button from '@material-ui/core/Button' \nimport axios from 'axios'\nimport { useHistory, useParams } from 'react-router-dom'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\nimport React from 'react'\nimport ConfirmDialog from '../ui/ConfirmDialog'\n\nconst useStyles = makeStyles(theme => ({\n  form: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    maxWidth: '80%',\n    margin: '0 auto',\n    '& .MuiFormControl-root': {\n      minWidth: '200px',\n      maxWidth: '500px',\n      margin: '0 24px 24px 0'\n    }\n  },\n  toolbar: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-around',\n    marginTop: '36px'\n  }\n}))\n\nexport default function ClienteForm() {\n  const classes = useStyles()\n\n \n\n  // Classes de caracters para a máscara da Clientelist\n  // 1) Três primeiras posições, somente letras (maiúsculas ou minúsculas) ~> [A-Za-z]\n  // 2) Quinta, sétima e oitava posições, somente dígitos ~> [0-9]\n  // 3) Sexta posição: dígitos ou letras (maiúsculas ou minúsculas) de A a J ~> [0-9A-Ja-j]\n  const formatChars = {\n    'A': '[A-Za-z]',\n    '0': '[0-9]',\n    '#': '[0-9A-Ja-j]'\n  }\n\n  // Máscara de entrada para a placa\n  const cpfmask = '000.000.000-00'\n\n  // Máscara para CPF: '000.000.000-00'\n  // Máscara para CNPJ: '00.000.000/0000-00'\n  const celularmask = '(00)00000-0000'\n\n  const [cliente, setcliente] = useState({\n    id: null,\n    nome: '',\n    cpf: '',\n    rg: '',\n    logradouro: '',   \n    num_imovel: '',\n    complemento: '',\n    bairro: '',\n    municipio:'',\n    uf:'',\n    telefone:'',\n    email:''\n  })\n  const [currentId, setCurrentId] = useState()\n\n  const [sendBtnStatus, setSendBtnStatus] = useState({\n    disabled: false,\n    label: 'Enviar'\n  })\n\n  const [sbStatus, setSbStatus] = useState({\n    open: false,\n    severity: 'success',\n    message: '' \n  })\n\n  const [error, setError] = useState({\n    nome: '',\n    cpf: '',\n    rg: '',\n    logradouro: '',   \n    num_imovel: '',\n    complemento: '',\n    bairro: '',\n    municipio:'',\n    uf:'',\n    telefone:'',\n    email:''\n  })\n\n  const [isModified, setIsModified] = useState(false)\n\n  const [dialogOpen, setDialogOpen] = useState(false) // O diálogo de confirmação está aberto?\n\n  const [title, setTitle] = useState('Cadastrar novo cliente')\n\n  const history = useHistory()\n  const params = useParams()\n\n  // useEffect() para quando o formulário for carregado (só na inicialização)\n  useEffect(() => {\n    // Verificamos se a rota atual contém o parâmetro id\n    // Em caso positivo, buscamos os dados no back-end e carregamos o formulário para edição\n    if(params.id) {\n      setTitle('Editar cliente')\n      getData(params.id)\n    }\n  }, [])\n\n  async function getData(id) {\n    try {\n      let response = await axios.get(`https://api.faustocintra.com.br/clientes/${id}`)\n      setcliente(response.data)\n    }\n    catch(error) {\n      setSbStatus({\n        open: true,\n        severity: 'error',\n        message: 'Não foi possível carregar os dados para edição.'\n      })\n    }\n  }\n\n  function handleInputChange(event, property) {\n\n    const clientetemp = {...cliente}\n\n    setCurrentId(event.target.id)\n    if(event.target.id) property = event.target.id\n\n    if(property === 'importado') {\n      const newState = ! importadoChecked // Inverte o valor\n      if(newState) clientetemp.importado = '1'\n      else clientetemp.importado = '0'\n      setImportadoChecked(newState) \n    }\n    else if(property === 'placa') {\n      clientetemp.placa = event.target.value.toUpperCase()\n    }\n    else {\n      // Quando o nome de uma propriedade de objeto aparece entre [],\n      // significa que o nome da propriedade será determinado pela\n      // variável ou expressão contida dentro dos colchetes\n      karangoTemp[property] = event.target.value\n    }\n    setKarango(karangoTemp)\n    setIsModified(true)   // O formulário foi modificado\n    validate(karangoTemp)  // Dispara a validação\n  }\n\n  function validate(data) {\n    let isValid = true\n\n    const errorTemp = {\n    nome: '',\n    cpf: '',\n    rg: '',\n    logradouro: '',   \n    num_imovel: '',\n    complemento: '',\n    bairro: '',\n    municipio:'',\n    uf:'',\n    telefone:'',\n    email:''\n    }\n\n    // trim(): retira espaços em branco do início e do final de uma string\n    if(data.nome.trim() === '') {\n      errorTemp.nome = 'O nome deve ser preenchida'\n      isValid = false\n    }     \n\n    if(data.cpf.trim() === '') {\n      errorTemp.cpf = 'O cpf deve ser preenchido'\n      isValid = false\n    }\n\n    if(data.rg.trim() === '') {\n      errorTemp.rg = 'O rg deve ser informado'\n      isValid = false\n    }\n\n    if(data.logradouro.trim() === '') {\n      errorTemp.logradouro = 'O logradouro deve ser informado'\n      isValid = false\n    }\n\n    if(data.num_imovel.trim() === '') {\n      errorTemp.num_imovel = 'O numero do imovel deve ser informado'\n      isValid = false\n    }\n\n    if(data.complemento.trim() === '') {\n      errorTemp.complemento = 'O complemento deve ser informado'\n      isValid = false\n    }\n    if(data.bairro.trim() === '') {\n      errorTemp.bairro = 'O bairro deve ser informado'\n      isValid = false\n    }\n    if(data.municipio.trim() === '') {\n      errorTemp.municipio = 'O municipio deve ser informado'\n      isValid = false\n    }\n    if(data.uf.trim() === '') {\n      errorTemp.uf = 'O uf deve ser informado'\n      isValid = false\n    }\n    if(data.telefone.trim() === '') {\n      errorTemp.telefone = 'O telefone deve ser informado'\n      isValid = false\n    }\n    if(data.email.trim() === '') {\n      errorTemp.email = 'O email deve ser informado'\n      isValid = false\n    }\n\n  \n  setError(errorTemp)\n    return isValid\n  }\n\n  async function saveData() {\n    try {\n      // Desabilita o botão de enviar para evitar envios duplicados\n      setSendBtnStatus({disabled: true, label: 'Enviando...'})\n      \n      // Se estivermos editando, precisamos enviar os dados com o verbo HTTP PUT\n      if(params.id) await axios.put(`https://api.faustocintra.com.br/clientes/${params.id}`, cliente)\n      // Senão, estaremos criando um novo registro, e o verbo HTTP a ser usado é o POST\n      else await axios.post('https://api.faustocintra.com.br/clientes', cliente)\n      \n      // Mostra a SnackBar\n      setSbStatus({open: true, severity: 'success', message: 'Dados salvos com sucesso!'})\n      \n    }\n    catch(error) {\n      // Mostra a SnackBar\n      setSbStatus({open: true, severity: 'error', message: 'ERRO: ' + error.message})\n    }\n    // Restaura o estado inicial do botão de envio\n    setSendBtnStatus({disabled: false, label: 'Enviar'})\n  }\n\n  function handleSubmit(event) {\n\n    event.preventDefault()    // Evita que a página seja recarregada\n\n    // Só envia para o banco de dados se o formulário for válido\n    if(validate(cliente)) saveData()\n\n  }\n\n  function handleSbClose() {\n    setSbStatus({...sbStatus, open: false})\n\n    // Retorna para a página de listagem em caso de sucesso\n    if(sbStatus.severity === 'success') history.push('/list')\n  }\n\n  function handleDialogClose(result) {\n    setDialogOpen(false)\n\n    // Se o usuário concordou em voltar \n    if(result) history.push('/list')\n  }\n\n  function handleGoBack() {\n    // Se o formulário tiver sido modificado, exibimos o diálogo de confirmação\n    if(isModified) setDialogOpen(true)\n    // Senão, podemos voltar diretamente para a listagem\n    else history.push('/list')\n  }\n\n  return (\n    <>\n\n      <ConfirmDialog isOpen={dialogOpen} onClose={handleDialogClose}>\n        Há dados não salvos. Deseja realmente voltar?\n      </ConfirmDialog>\n\n      <Snackbar open={sbStatus.open} autoHideDuration={6000} onClose={handleSbClose}>\n        <MuiAlert elevation={6} variant=\"filled\" onClose={handleSbClose} severity={sbStatus.severity}>\n          {sbStatus.message}\n        </MuiAlert>\n      </Snackbar>\n\n      <h1>{title}</h1>\n      <form className={classes.form} onSubmit={handleSubmit}>\n        \n        <TextField \n          id=\"nome\" \n          label=\"Nome\" \n          variant=\"filled\"\n          value={cliente.nome}\n          onChange={handleInputChange}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o nome do cliente\"\n          fullWidth\n          error={error.nome !== ''}\n          helperText={error.nome}\n        />\n\n        <TextField \n          id=\"cpf\" \n          label=\"CPF\" \n          variant=\"filled\"\n          value={cliente.cpf}\n          onChange={handleInputChange}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o cpf do cliente\"\n          fullWidth\n          error={error.cpf !== ''}\n          helperText={error.cpf}\n        />\n        \n        <InputMask\n          id=\"cpf\" \n          mask={cpfmask}\n          formatChars={formatChars}\n          value={cliente.cpf}\n          onChange={(event) => handleInputChange(event, 'cpf')}\n        >\n        </InputMask>\n\n        <TextField \n          id=\"rg\" \n          label=\"RG\" \n          variant=\"filled\"\n          value={cliente.rg}\n          onChange={event => handleInputChange(event, 'rg')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o rg do cliente\"\n          select\n          fullWidth\n          error={error.rg !== ''}\n          helperText={error.rg}\n        />\n       \n        <TextField \n          id=\"logradouro\" \n          label=\"Logradouro\" \n          variant=\"filled\"\n          value={cliente.logradouro}\n          onChange={event => handleInputChange(event, 'logradouro')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o logradouro do cliente\"\n          select\n          fullWidth\n          error={error.logradouro !== ''}\n          helperText={error.logradouro}\n        />\n       \n        <TextField \n          id=\"num_imovel\" \n          label=\"Numero imovel\" \n          variant=\"filled\"\n          value={cliente.num_imovel}\n          onChange={event => handleInputChange(event, 'num_imovel')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o numero do imovel do cliente\"\n          select\n          fullWidth\n          error={error.num_imovel !== ''}\n          helperText={error.num_imovel}\n        />\n       \n        <TextField \n          id=\"complemento\" \n          label=\"Complemento\" \n          variant=\"filled\"\n          value={cliente.complemento}\n          onChange={event => handleInputChange(event, 'complemento')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o complemento do cliente\"\n          select\n          fullWidth\n          error={error.complemento !== ''}\n          helperText={error.complemento}\n        />\n        \n        <TextField \n          id=\"bairro\" \n          label=\"Bairro\" \n          variant=\"filled\"\n          value={cliente.bairro}\n          onChange={event => handleInputChange(event, 'bairro')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o bairro do cliente\"\n          select\n          fullWidth\n          error={error.bairro !== ''}\n          helperText={error.bairro}\n        />\n\n        <TextField \n          id=\"municipio\" \n          label=\"Municipio\" \n          variant=\"filled\"\n          value={cliente.municipio}\n          onChange={event => handleInputChange(event, 'municipio')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o municipio do cliente\"\n          select\n          fullWidth\n          error={error.municipio !== ''}\n          helperText={error.municipio}\n        />\n\n        <TextField \n          id=\"uf\" \n          label=\"UF\" \n          variant=\"filled\"\n          value={cliente.uf}\n          onChange={event => handleInputChange(event, 'uf')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o uf do cliente\"\n          select\n          fullWidth\n          error={error.uf !== ''}\n          helperText={error.uf}\n        />\n\n        <TextField \n          id=\"telefone\" \n          label=\"Telefone\" \n          variant=\"filled\"\n          value={cliente.telefone}\n          onChange={event => handleInputChange(event, 'telefone')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o telefone do cliente\"\n          select\n          fullWidth\n          error={error.telefone !== ''}\n          helperText={error.telefone}\n        />\n        <TextField \n          id=\"email\" \n          label=\"Email\" \n          variant=\"filled\"\n          value={cliente.email}\n          onChange={event => handleInputChange(event, 'email')}\n          required  /* not null, precisa ser preenchido */\n          placeholder=\"Informe o email do cliente\"\n          select\n          fullWidth\n          error={error.email !== ''}\n          helperText={error.email}\n        />\n       \n        \n        <Toolbar className={classes.toolbar}>\n          <Button type=\"submit\" variant=\"contained\" color=\"secondary\" disabled={sendBtnStatus.disabled}>\n            {sendBtnStatus.label}\n          </Button>\n          <Button variant=\"contained\" onClick={handleGoBack}>Voltar</Button>\n        </Toolbar>\n\n        {/* <div>\n          {JSON.stringify(cliente)}\n          <br />\n          currentId: {JSON.stringify(currentId)}\n          <br />\n          isModified: {JSON.stringify(isModified)}\n        </div> */}\n      </form>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}